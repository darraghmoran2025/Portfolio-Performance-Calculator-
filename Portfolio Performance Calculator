import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

def calculate_portfolio_performance(tickers, weights=None, period="1y"):
    """
    Calculate the performance of a portfolio of stocks
    
    Parameters:
    tickers (list): List of stock ticker symbols
    weights (list): List of weights for each ticker (defaults to equal weights)
    period (str): Time period for analysis (e.g., "1y", "3y", "5y")
    
    Returns:
    dict: Dictionary containing portfolio performance metrics
    """
    # Set default weights if not provided (equal weighting)
    if weights is None:
        weights = [1/len(tickers)] * len(tickers)
    
    # Ensure weights sum to 1
    weights = np.array(weights) / sum(weights)
    
    # Fetch historical price data
    data = yf.download(tickers, period=period)['Adj Close']
    
    # Handle single ticker case
    if len(tickers) == 1:
        data = pd.DataFrame(data, columns=tickers)
    
    # Calculate daily returns
    returns = data.pct_change().dropna()
    
    # Calculate portfolio daily returns
    portfolio_returns = returns.dot(weights)
    
    # Calculate cumulative returns
    cumulative_returns = (1 + returns).cumprod() - 1
    portfolio_cumulative_return = (1 + portfolio_returns).cumprod() - 1
    
    # Calculate annualized return
    total_days = len(portfolio_returns)
    years = total_days / 252  # Approximate trading days in a year
    
    # Calculate total return for the period
    total_return = portfolio_cumulative_return.iloc[-1]
    
    # Calculate annualized return
    annualized_return = (1 + total_return) ** (1 / years) - 1
    
    # Calculate portfolio risk (standard deviation of returns)
    portfolio_risk = portfolio_returns.std() * np.sqrt(252)  # Annualized
    
    # Calculate individual stock metrics
    stock_metrics = {}
    for i, ticker in enumerate(tickers):
        if ticker in cumulative_returns.columns:
            stock_return = cumulative_returns[ticker].iloc[-1]
            stock_annualized_return = (1 + stock_return) ** (1 / years) - 1
            stock_risk = returns[ticker].std() * np.sqrt(252)
            
            stock_metrics[ticker] = {
                'weight': weights[i] * 100,
                'total_return': stock_return * 100,
                'annualized_return': stock_annualized_return * 100,
                'risk': stock_risk * 100
            }
    
    # Calculate simple Sharpe ratio (assuming risk-free rate = 0 for simplicity)
    sharpe_ratio = annualized_return / portfolio_risk
    
    # Prepare results
    results = {
        'portfolio': {
            'total_return': total_return * 100,
            'annualized_return': annualized_return * 100,
            'risk': portfolio_risk * 100,
            'sharpe_ratio': sharpe_ratio
        },
        'stocks': stock_metrics
    }
    
    return results, returns, cumulative_returns, portfolio_cumulative_return

def plot_portfolio_performance(tickers, cumulative_returns, portfolio_cumulative_return):
    """
    Plot the cumulative returns of the portfolio and individual stocks
    
    Parameters:
    tickers (list): List of stock ticker symbols
    cumulative_returns (DataFrame): Cumulative returns of individual stocks
    portfolio_cumulative_return (Series): Cumulative returns of the portfolio
    """
    plt.figure(figsize=(10, 6))
    
    # Plot individual stock returns
    for ticker in tickers:
        if ticker in cumulative_returns.columns:
            plt.plot(cumulative_returns[ticker], label=ticker, alpha=0.7)
    
    # Plot portfolio return
    plt.plot(portfolio_cumulative_return, label='Portfolio', linewidth=2, color='black')
    
    plt.title('Portfolio Performance')
    plt.xlabel('Date')
    plt.ylabel('Cumulative Return')
    plt.legend()
    plt.grid(alpha=0.3)
    plt.tight_layout()
    
    return plt

def main():
    # Example usage
    tickers = input("Enter stock tickers (comma-separated, e.g., AAPL,MSFT,GOOG): ").split(',')
    tickers = [ticker.strip().upper() for ticker in tickers]
    
    weight_input = input("Enter weights (comma-separated, leave blank for equal weights): ")
    if weight_input.strip():
        weights = [float(w.strip()) for w in weight_input.split(',')]
    else:
        weights = None
    
    period = input("Enter time period (1y, 3y, 5y, max): ") or "1y"
    
    print("\nCalculating portfolio performance...")
    results, returns, cumulative_returns, portfolio_cumulative_return = calculate_portfolio_performance(tickers, weights, period)
    
    # Print results
    print("\n===== PORTFOLIO PERFORMANCE =====")
    print(f"Total Return: {results['portfolio']['total_return']:.2f}%")
    print(f"Annualized Return: {results['portfolio']['annualized_return']:.2f}%")
    print(f"Risk (Volatility): {results['portfolio']['risk']:.2f}%")
    print(f"Sharpe Ratio: {results['portfolio']['sharpe_ratio']:.2f}")
    
    print("\n===== STOCK ALLOCATION =====")
    for ticker, metrics in results['stocks'].items():
        print(f"{ticker}: {metrics['weight']:.2f}%")
    
    print("\n===== INDIVIDUAL STOCK PERFORMANCE =====")
    for ticker, metrics in results['stocks'].items():
        print(f"{ticker}:")
        print(f"  Total Return: {metrics['total_return']:.2f}%")
        print(f"  Annualized Return: {metrics['annualized_return']:.2f}%")
        print(f"  Risk (Volatility): {metrics['risk']:.2f}%")
    
    # Create and show plot
    plot = plot_portfolio_performance(tickers, cumulative_returns, portfolio_cumulative_return)
    plt.show()

if __name__ == "__main__":
    main()
